/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface VaultInterface extends utils.Interface {
  functions: {
    "adminTransfer(address,uint256)": FunctionFragment;
    "andamanToken()": FunctionFragment;
    "andamanTokenAddress()": FunctionFragment;
    "burnToken(uint256)": FunctionFragment;
    "hotelTransfer(uint256)": FunctionFragment;
    "payHotel(address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adminTransfer"
      | "andamanToken"
      | "andamanTokenAddress"
      | "burnToken"
      | "hotelTransfer"
      | "payHotel"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adminTransfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "andamanToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "andamanTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hotelTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payHotel",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "andamanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "andamanTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hotelTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payHotel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminTransfer(address,address,uint256)": EventFragment;
    "BurnToken(address,uint256,uint256)": EventFragment;
    "HotelTransfer(address,uint256,uint256)": EventFragment;
    "PayHotel(address,address,uint256,uint256)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HotelTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayHotel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AdminTransferEventObject {
  to: string;
  adminAddress: string;
  amount: BigNumber;
}
export type AdminTransferEvent = TypedEvent<
  [string, string, BigNumber],
  AdminTransferEventObject
>;

export type AdminTransferEventFilter = TypedEventFilter<AdminTransferEvent>;

export interface BurnTokenEventObject {
  from: string;
  ticketId: BigNumber;
  amount: BigNumber;
}
export type BurnTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BurnTokenEventObject
>;

export type BurnTokenEventFilter = TypedEventFilter<BurnTokenEvent>;

export interface HotelTransferEventObject {
  from: string;
  ticketId: BigNumber;
  amount: BigNumber;
}
export type HotelTransferEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  HotelTransferEventObject
>;

export type HotelTransferEventFilter = TypedEventFilter<HotelTransferEvent>;

export interface PayHotelEventObject {
  from: string;
  hotelAddress: string;
  amount: BigNumber;
  fee: BigNumber;
}
export type PayHotelEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  PayHotelEventObject
>;

export type PayHotelEventFilter = TypedEventFilter<PayHotelEvent>;

export interface WithdrawEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adminTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    andamanToken(overrides?: CallOverrides): Promise<[string]>;

    andamanTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    burnToken(
      ticketId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hotelTransfer(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payHotel(
      hotelAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  adminTransfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  andamanToken(overrides?: CallOverrides): Promise<string>;

  andamanTokenAddress(overrides?: CallOverrides): Promise<string>;

  burnToken(
    ticketId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hotelTransfer(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payHotel(
    hotelAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adminTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    andamanToken(overrides?: CallOverrides): Promise<string>;

    andamanTokenAddress(overrides?: CallOverrides): Promise<string>;

    burnToken(ticketId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    hotelTransfer(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    payHotel(
      hotelAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminTransfer(address,address,uint256)"(
      to?: string | null,
      adminAddress?: string | null,
      amount?: null
    ): AdminTransferEventFilter;
    AdminTransfer(
      to?: string | null,
      adminAddress?: string | null,
      amount?: null
    ): AdminTransferEventFilter;

    "BurnToken(address,uint256,uint256)"(
      from?: string | null,
      ticketId?: BigNumberish | null,
      amount?: null
    ): BurnTokenEventFilter;
    BurnToken(
      from?: string | null,
      ticketId?: BigNumberish | null,
      amount?: null
    ): BurnTokenEventFilter;

    "HotelTransfer(address,uint256,uint256)"(
      from?: string | null,
      ticketId?: BigNumberish | null,
      amount?: null
    ): HotelTransferEventFilter;
    HotelTransfer(
      from?: string | null,
      ticketId?: BigNumberish | null,
      amount?: null
    ): HotelTransferEventFilter;

    "PayHotel(address,address,uint256,uint256)"(
      from?: string | null,
      hotelAddress?: string | null,
      amount?: null,
      fee?: null
    ): PayHotelEventFilter;
    PayHotel(
      from?: string | null,
      hotelAddress?: string | null,
      amount?: null,
      fee?: null
    ): PayHotelEventFilter;

    "Withdraw(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    adminTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    andamanToken(overrides?: CallOverrides): Promise<BigNumber>;

    andamanTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    burnToken(
      ticketId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hotelTransfer(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payHotel(
      hotelAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    andamanToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    andamanTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnToken(
      ticketId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hotelTransfer(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payHotel(
      hotelAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
