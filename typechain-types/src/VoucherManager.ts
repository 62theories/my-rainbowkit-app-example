/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface VoucherManagerInterface extends utils.Interface {
  functions: {
    "divider()": FunctionFragment;
    "purchaseVoucher(uint256)": FunctionFragment;
    "redeemVoucher(uint256,address)": FunctionFragment;
    "serviceFee()": FunctionFragment;
    "vouchers(uint256)": FunctionFragment;
    "vouchersLength()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "divider"
      | "purchaseVoucher"
      | "redeemVoucher"
      | "serviceFee"
      | "vouchers"
      | "vouchersLength"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "divider", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseVoucher",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemVoucher",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vouchers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vouchersLength",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "divider", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "serviceFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vouchers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vouchersLength",
    data: BytesLike
  ): Result;

  events: {
    "VoucherPurchased(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VoucherPurchased"): EventFragment;
}

export interface VoucherPurchasedEventObject {
  voucherId: BigNumber;
}
export type VoucherPurchasedEvent = TypedEvent<
  [BigNumber],
  VoucherPurchasedEventObject
>;

export type VoucherPurchasedEventFilter =
  TypedEventFilter<VoucherPurchasedEvent>;

export interface VoucherManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VoucherManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    divider(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchaseVoucher(
      ADMamount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemVoucher(
      voucherId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    serviceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    vouchers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { ADMamount: BigNumber; isRedeemed: boolean }
    >;

    vouchersLength(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  divider(overrides?: CallOverrides): Promise<BigNumber>;

  purchaseVoucher(
    ADMamount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemVoucher(
    voucherId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  serviceFee(overrides?: CallOverrides): Promise<BigNumber>;

  vouchers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { ADMamount: BigNumber; isRedeemed: boolean }
  >;

  vouchersLength(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    divider(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseVoucher(
      ADMamount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemVoucher(
      voucherId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    serviceFee(overrides?: CallOverrides): Promise<BigNumber>;

    vouchers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { ADMamount: BigNumber; isRedeemed: boolean }
    >;

    vouchersLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "VoucherPurchased(uint256)"(
      voucherId?: BigNumberish | null
    ): VoucherPurchasedEventFilter;
    VoucherPurchased(
      voucherId?: BigNumberish | null
    ): VoucherPurchasedEventFilter;
  };

  estimateGas: {
    divider(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseVoucher(
      ADMamount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemVoucher(
      voucherId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    serviceFee(overrides?: CallOverrides): Promise<BigNumber>;

    vouchers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    vouchersLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    divider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseVoucher(
      ADMamount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemVoucher(
      voucherId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    serviceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vouchers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vouchersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
